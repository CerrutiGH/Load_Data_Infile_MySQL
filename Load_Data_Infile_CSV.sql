
/*
[x] 03 VIEWS
[x] 05 TABELAS TEMPORÁRIAS
[x] 03 PROCEDURES
[X] 06 FUNÇÕES COSTUMIZADAS
[x] 02 TRIGGERS
[X] 01 TRANSAÇÃO

<--------------<x>-------------->

[X] SELECTS
[X] EXPORT
[X] LOAD
[X] UPDATE
[x] FUNÇÕES PRÉ DEFINIDAS
[X] JUNÇÃO 
[X] GROUP BY
[X] ORDER BY
[X] DELETE
*/

show variables;
DROP DATABASE IF EXISTS dbREC;
CREATE DATABASE dbREC;
USE dbREC;


/*FUNÇÕES COSTUMIZADAS*/

-- CONTA QUANTOS JOGOS TEVE NO PERIODO
DROP FUNCTION IF EXISTS FN_RODADAS;
DELIMITER $
CREATE FUNCTION FN_RODADAS()
RETURNS INT READS SQL DATA
BEGIN 
 RETURN (SELECT COUNT(RODADA) FROM tb_CAMPEONATO_BRASILEIRO);
END $

-- PESQUISA DE ARENA POR CÓDIGO
DROP FUNCTION IF EXISTS FN_ARENA;
DELIMITER $
CREATE FUNCTION FN_ARENA (a int)
RETURNS VARCHAR(60) READS SQL DATA
BEGIN 
RETURN (SELECT CONCAT('A Arena ', NOME_ARENA, ' pertence ao código ', COD_ARENA) FROM tb_ARENA WHERE COD_ARENA = a);
END $

-- PESQUISA DE ESTADO PERTENCENTE AO TIME PESQUISADO
DROP FUNCTION IF EXISTS FN_ESTADOS;
DELIMITER $
CREATE FUNCTION FN_ESTADOS (a TEXT)
RETURNS VARCHAR(60) READS SQL DATA
BEGIN 
RETURN (SELECT CONCAT('O time ', CLUBE_UM, ' pertence ao estado ', CLUBE_UM_ESTADO) FROM tb_CAMPEONATO_BRASILEIRO WHERE CLUBE_UM = a group by CLUBE_UM);
END $

-- CONTA QUANTOS JOGOS TEVE EM TODOS OS MESMO DIAS DA SEMANA PESQUISADO
DROP FUNCTION IF EXISTS FN_DATA;
DELIMITER $
CREATE FUNCTION FN_DATA (a TEXT)
RETURNS VARCHAR(60) READS SQL DATA
BEGIN 
RETURN (SELECT COUNT( DIA) FROM tb_CAMPEONATO_BRASILEIRO WHERE DIA = a group by DIA);
END $

-- CONTA A QUANTIDADE DE VITÓRIAS QUE O TIME PESQUISADO OBTEVE 
DROP FUNCTION IF EXISTS FN_QTD_VITORIAS;
DELIMITER $
CREATE FUNCTION FN_QTD_VITORIAS (a TEXT)
RETURNS VARCHAR(60) READS SQL DATA
BEGIN 
RETURN (SELECT CONCAT('O time ', VENCEDOR ,' teve ', COUNT(VENCEDOR), ' vitórias nesse período') FROM tb_CAMPEONATO_BRASILEIRO WHERE VENCEDOR = a group by VENCEDOR);
END $


-- CONTA A QUANTIDADE DE GOLS QUE UM QUE TEVE NOS CAMPEONATOS (TOTAL)
DROP FUNCTION IF EXISTS FN_QTD_GOLS;
DELIMITER $
CREATE FUNCTION FN_QTD_GOLS (a TEXT)
RETURNS INTEGER READS SQL DATA
BEGIN 
RETURN (SELECT (SUM(CLUBE_UM_GOLS) + SUM(CLUBE_DOIS_GOLS)) FROM tb_CAMPEONATO_BRASILEIRO WHERE DIA = a);
END $


/*PROCEDURES*/

-- PROCEDURE QUE DELETA O TIME "CORINTHIANS" DA LISTA E TODOS SEUS REGISTROS
drop procedure if exists DEL_CLUBE;
DELIMITER $$
CREATE PROCEDURE DEL_CLUBE(in varDel int)
BEGIN
DELETE FROM tb_CAMPEONATO_BRASILEIRO where CLUBE_UM = 'Corinthians' and (varDel = 1);
END $$
DELIMITER ;

-- PROCEDURE QUE CHAMA OS INNER JOINS
drop procedure if exists CALL_INNER;
DELIMITER $$
CREATE PROCEDURE CALL_INNER(in varCallInner int)
BEGIN
SELECT tb_CAMPEONATO_BRASILEIRO.CLUBE_DOIS_GOLS, tb_CAMPEONATO_BRASILEIRO.CLUBE_UM_GOLS, tb_VENCEDORES.TIME_VENCEDOR
from tb_CAMPEONATO_BRASILEIRO inner join tb_VENCEDORES WHERE varCallInner = 1;
END $$
DELIMITER ;

-- PROCEDURE QUE CHAMA AS VIEWS CRIADAS
drop procedure if exists CALL_VIEWS;
DELIMITER $$
CREATE PROCEDURE CALL_VIEWS(in varCallViews int)
BEGIN
SELECT * FROM VW_ARENA_VENCEDORES WHERE varCallViews = 1;
SELECT * FROM VW_CAMP_BRA_VENCEDORES WHERE varCallViews = 1;
SELECT * FROM VW_ARENA WHERE varCallViews = 1;
END $$
DELIMITER ;

-- TABELA MÃE
CREATE TABLE tb_CAMPEONATO_BRASILEIRO(
HORARIO VARCHAR(6) NOT NULL,
DIA TEXT NOT NULL,
DATA_JOGO DATE NOT NULL,
CLUBE_UM TEXT NOT NULL,
CLUBE_DOIS TEXT NOT NULL,
VENCEDOR TEXT NOT NULL,
RODADA VARCHAR (100) NOT NULL,
ARENA TEXT,
CLUBE_UM_GOLS INTEGER NOT NULL,
CLUBE_DOIS_GOLS INTEGER NOT NULL,
CLUBE_UM_ESTADO TEXT NOT NULL,
CLUBE_DOIS_ESTADO TEXT NOT NULL,
ESTADO_CLUBE_VENCEDOR TEXT NOT NULL
);


CREATE TABLE tb_ARENA(
COD_ARENA INTEGER PRIMARY KEY AUTO_INCREMENT,
NOME_ARENA TEXT NOT NULL
);




-- TRIGGER PARA INSERIR DADOS NA TABELA tb_ARENA APÓS SER INSERIDO DADOS NA TABELA MÃE
DELIMITER $$
CREATE TRIGGER trg_INSERE_TABELA BEFORE INSERT ON tb_CAMPEONATO_BRASILEIRO
FOR EACH ROW
BEGIN
SET @ARENA = NEW.ARENA;
IF @ARENA NOT IN (SELECT NOME_ARENA FROM tb_ARENA) THEN INSERT INTO tb_ARENA (NOME_ARENA)
VALUES (@ARENA);
END IF;
END$$
DELIMITER ;



/*========== LOAD ==========*/
-- LOAD DE ARQUIVO CSV
LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/campeonato-brasileiro-full.csv'
REPLACE 
INTO TABLE tb_CAMPEONATO_BRASILEIRO
FIELDS TERMINATED BY ','
ENCLOSED BY ''
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(HORARIO,DIA,DATA_JOGO,CLUBE_UM,CLUBE_DOIS,VENCEDOR,RODADA,ARENA,CLUBE_UM_GOLS,CLUBE_DOIS_GOLS,CLUBE_UM_ESTADO,CLUBE_DOIS_ESTADO,ESTADO_CLUBE_VENCEDOR);


/*=========== EXPORT ============*/
-- EXPORTS PARA CRIAÇÃO DE ARQUIVOS CSV



SELECT  CLUBE_UM, CLUBE_DOIS, VENCEDOR, RODADA
INTO OUTFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/VENCEDORES.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY ''
LINES TERMINATED BY '\n'
FROM tb_CAMPEONATO_BRASILEIRO group by RODADA;

SELECT HORARIO, DIA, VENCEDOR
INTO OUTFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/Vencedores_dias_e_horario.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY ''
LINES TERMINATED BY '\n'
FROM tb_CAMPEONATO_BRASILEIRO group by VENCEDOR order by VENCEDOR;

SELECT CLUBE_UM, CLUBE_UM_ESTADO, CLUBE_DOIS, CLUBE_DOIS_ESTADO
INTO OUTFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/CLUBES E ESTADOS.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY ''
LINES TERMINATED BY '\n'
FROM tb_CAMPEONATO_BRASILEIRO where CLUBE_UM_ESTADO='RJ' AND CLUBE_DOIS_ESTADO ="SP" group by VENCEDOR;
/*ENCERRAMENTO DOS EXPORTS*/


CREATE TABLE tb_VENCEDORES(
CLUBE_UM TEXT NOT NULL,
CLUBE_DOIS TEXT NOT NULL,
TIME_VENCEDOR TEXT,
RODADA TEXT NOT NULL
);


CREATE TABLE tb_RODADAS(
RODADA TEXT NOT NULL
);

-- TRIGGER PARA INSERIR DADOS NA TABELA tb_VENCEDORES_PRIMEIRA_RODADA QUANDO INSERIDO DADOS NA TABELA tb_VENCEDORES 
DELIMITER $$
CREATE TRIGGER trg_INSERE_TABELA_DOIS BEFORE INSERT ON tb_VENCEDORES
FOR EACH ROW
BEGIN
SET @RODADA = NEW.RODADA;
IF @RODADA NOT IN (SELECT RODADA FROM tb_RODADAS) THEN INSERT INTO tb_RODADAS ( RODADA ) 
VALUES (@RODADA ) ;
END IF;
END$$
DELIMITER ;

-- INSERÇÃO DE DADOS NA TABELA tb_VENCEDORES A PARTIR DE UM LOAD FEITO COM UM ARQUIVO CRIADO NO EXPORT
LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/VENCEDORES.csv'
REPLACE 
INTO TABLE tb_VENCEDORES
FIELDS TERMINATED BY ','
ENCLOSED BY ''
LINES TERMINATED BY '\n'
(CLUBE_UM, CLUBE_DOIS, TIME_VENCEDOR, RODADA);

/*=========== SELECTS, INNER, UPDATES E DELETES ============*/
-- SELECTS DAS TABELAS
SELECT * FROM tb_ARENA;
SELECT * FROM tb_vencedores;
SELECT * FROM tb_RODADAS;
SELECT * FROM tb_CAMPEONATO_BRASILEIRO;

-- UPDATE FEITO PARA ATUALIZAR O NOME DAS ARENAS PARA CÓDIGO
update tb_CAMPEONATO_BRASILEIRO set tb_CAMPEONATO_BRASILEIRO.ARENA = 
(select tb_ARENA.COD_ARENA from tb_ARENA where tb_ARENA.NOME_ARENA = 
tb_CAMPEONATO_BRASILEIRO.ARENA);

-- DELETA TODOS OS REGISTROS DA TABELA QUE TIVER COM ESTADO BAHIA
delete from tb_CAMPEONATO_BRASILEIRO where CLUBE_DOIS_ESTADO = "BA";


/*=========== Views =============*/
-- VIEW QUE JUNTA ARENAS E TIMES VENCEDORES
CREATE VIEW VW_ARENA_VENCEDORES AS SELECT tb_ARENA.NOME_ARENA, tb_VENCEDORES.TIME_VENCEDOR 
FROM tb_ARENA INNER JOIN tb_VENCEDORES;

-- VIEW QUE JUNTA RODADAS DE JOGOS COM VENCEDORES
CREATE VIEW VW_CAMP_BRA_VENCEDORES AS SELECT tb_CAMPEONATO_BRASILEIRO.RODADA, tb_VENCEDORES.TIME_VENCEDOR
FROM tb_CAMPEONATO_BRASILEIRO INNER JOIN tb_VENCEDORES;

-- VIEW QUE JUNTA ARENA E CÓDIGO DELA
CREATE VIEW VW_ARENA AS SELECT tb_CAMPEONATO_BRASILEIRO.ARENA, tb_ARENA.COD_ARENA
FROM tb_CAMPEONATO_BRASILEIRO INNER JOIN tb_ARENA ON tb_CAMPEONATO_BRASILEIRO.ARENA = tb_ARENA.COD_ARENA;


/*TABELAS TEMPORÁRIAS*/
/*
drop table if exists tbPedido_tbMiojos;
create temporary table tbPedido_tbMiojos select tbMiojos.variedade, tbMiojos.estrelas, tbPedido.cod_ped, tbPedido.cod_miojo
from tbMiojos 
inner join tbPedido on tbPedido.cod_miojo = tbMiojos.cod_miojo order by tbMiojos.estrelas desc;
select * from tbPedido_tbMiojos;
*/

DROP TABLE IF EXISTS TEMP_DIA_DATA_HORA;
CREATE TEMPORARY TABLE TEMP_DIA_DATA_HORA SELECT tb_CAMPEONATO_BRASILEIRO.DIA, tb_CAMPEONATO_BRASILEIRO.DATA_JOGO, tb_CAMPEONATO_BRASILEIRO.HORARIO FROM tb_CAMPEONATO_BRASILEIRO ORDER BY DATA_JOGO;
SELECT * FROM TEMP_DIA_DATA_HORA;

DROP TABLE IF EXISTS TEMP_RODADA_DATA;
CREATE TEMPORARY TABLE TEMP_RODADA_DATA SELECT tb_CAMPEONATO_BRASILEIRO.DATA_JOGO, tb_VENCEDORES.RODADA FROM tb_CAMPEONATO_BRASILEIRO INNER JOIN tb_VENCEDORES;
SELECT * FROM TEMP_RODADA_DATA;

DROP TABLE IF EXISTS TEMP_VENCEDOR_DATA;
CREATE TEMPORARY TABLE TEMP_VENCEDOR_DATA SELECT tb_CAMPEONATO_BRASILEIRO.DATA_JOGO, tb_VENCEDORES.TIME_VENCEDOR FROM tb_CAMPEONATO_BRASILEIRO INNER JOIN tb_VENCEDORES;
SELECT * FROM TEMP_VENCEDOR_DATA;

DROP TABLE IF EXISTS TEMP_CLUBES_ESTADOS;
CREATE TEMPORARY TABLE TEMP_CLUBES_ESTADOS SELECT tb_CAMPEONATO_BRASILEIRO.CLUBE_UM, tb_CAMPEONATO_BRASILEIRO.CLUBE_UM_ESTADO, tb_CAMPEONATO_BRASILEIRO.CLUBE_DOIS, tb_CAMPEONATO_BRASILEIRO.CLUBE_DOIS_ESTADO FROM tb_CAMPEONATO_BRASILEIRO;
SELECT * FROM TEMP_CLUBES_ESTADOS;

DROP TABLE IF EXISTS TEMP_ARENA_TIMES;
CREATE TEMPORARY TABLE TEMP_ARENA_TIMES SELECT tb_ARENA.NOME_ARENA, tb_VENCEDORES.CLUBE_UM, tb_VENCEDORES.CLUBE_DOIS FROM tb_ARENA INNER JOIN tb_VENCEDORES;
SELECT * FROM TEMP_ARENA_TIMES;

/*========== Transação ============*/
-- AQUI A TABELA MÃE FOI DELETADA POR COMPLETA
Start TRANSACTION;
DELETE FROM tb_CAMPEONATO_BRASILEIRO;
  SELECT * FROM tb_CAMPEONATO_BRASILEIRO; 
ROLLBACK; -- AQUI FOI DESFEITA A AÇÃO DE DELETE DA TABELA MÃE
SELECT * FROM tb_CAMPEONATO_BRASILEIRO;
	COMMIT;
show tables;


/*CHAMADA DAS PROCEDURES*/
CALL DEL_CLUBE(1);
CALL CALL_VIEWS(1);
CALL CALL_INNER(1);


/*CHAMADA DAS FUNÇÕES*/
SELECT FN_RODADAS();
SELECT FN_ARENA(4); -- INSIRA UM PARAMETRO PARA EFETUAR A PESQUISA
SELECT FN_ESTADOS('Gremio'); -- INSIRA UM PARAMETRO PARA EFETUAR A PESQUISA
SELECT FN_DATA('Domingo');   -- INSIRA UM PARAMETRO PARA EFETUAR A PESQUISA
SELECT FN_QTD_VITORIAS('São Paulo'); -- INSIRA UM PARAMETRO PARA EFETUAR A PESQUISA
SELECT FN_QTD_GOLS('Domingo'); -- INSIRA UM PARAMETRO PARA EFETUAR A PESQUISA
